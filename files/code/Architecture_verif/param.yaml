# Fichier YAML d'architecture pour le script d'analyse (param.yaml)
# Format attendu : racine "architecture" = liste d'étages dans l'ordre du parcours du signal.
# Chaque entrée représente un composant/étage. Les champs utilisés par le script :
#   - name:           nom (chaîne)
#   - type:           'ampli' | 'filter' | 'atten' | 'switch' | 'mixer'
#   - gain_dB:        gain en dB (pour les amplis) OR gain négatif pour atténuateur
#   - gain_dB_max:    (optionnel) gain max si disponible (permet mode "max")
#   - insertion_loss_dB: (pour filter/switch) perte positive en dB
#   - nf_dB:          figure de bruit en dB (pour amplis/mixers) — si absent, on estime
#   - op1db_dBm:      OP1dB en dBm (output 1 dB compression point)
#
# IMPORTANTS :
# - Toutes les puissances/gains/pertes sont en dB ou dBm (unités strictes).
# - Pour les filtres/switch, insertion_loss_dB doit être positive (ex : 1.2 dB).
# - Pour les atténuateurs : gain_dB doit être négatif (ex : -30).
# - Si une clé manquante existe, le script applique des valeurs par défaut (vérifier build_chain).
# - Eviter d'utiliser des valeurs extrêmes (ex : op1db_dBm = 1000), le script en fera un nombre linéaire énorme.

architecture:

  # ---------------------------
  # Filtre passe-haut centré sur FI (exemple)
  # - type: filter => script lit insertion_loss_dB (positif)
  # - NF du passif = insertion_loss_dB (convention physique)
  # - op1db_dBm renseigné pour traçabilité (valeur d'usage)
  # ---------------------------
  - name: "HPF_4GHz"
    type: "filter"
    insertion_loss_dB: 0.61      # perte d'insertion (dB). Doit être positive.
    op1db_dBm: 20               # OP1dB du bloc (dBm) — utile pour calculs de chaîne

  # ---------------------------
  # Switch RF ; traité comme un passif (insertion_loss_dB)
  # - type: switch => insertion_loss_dB positive
  # - op1db_dBm : tenue en puissance / saturation (dBm)
  # ---------------------------
  - name: "Switch"
    type: "switch"
    insertion_loss_dB: 0.85
    op1db_dBm: 25

  # Pré-filtre passe-haut (pré-sélection)
  - name: "Pre-HPF"
    type: "filter"
    insertion_loss_dB: 1.179
    op1db_dBm: 20

  # Pré-filtre passe-bas (pré-sélection)
  - name: "Pre-LPF"
    type: "filter"
    insertion_loss_dB: 0.819
    op1db_dBm: 20

  # autre switch (ex : routage vers banque de filtres)
  - name: "Switch"
    type: "switch"
    insertion_loss_dB: 0.85
    op1db_dBm: 25

  # ---------------------------
  # Amplificateur faible bruit (LNA1)
  # - type: ampli => fournir gain_dB et nf_dB
  # - op1db_dBm : OP1dB de sortie (dBm)
  # ---------------------------
  - name: "LNA1"
    type: "ampli"
    gain_dB: 15.3                # gain nominal en dB
    nf_dB: 3.5                   # figure de bruit en dB
    op1db_dBm: 23.94             # OP1dB sortie (dBm)

  # ---------------------------
  # Atténuateur variable simulé par entrée paramétrée
  # - type: atten => gain_dB négatif
  # - gain_dB_max : utile si l'atténuateur peut être réduit (ex : -5 dB en position minimale)
  # ---------------------------
  - name: "ATT_30dB"
    type: "atten"
    gain_dB: -30                 # position nominale (dB) -> valeur négative
    gain_dB_max: -5              # meilleur cas (moins d'atténuation)
    op1db_dBm: 20

  # Deuxième LNA (après atténuateur)
  - name: "LNA2"
    type: "ampli"
    gain_dB: 15.3
    nf_dB: 3.5
    op1db_dBm: 23.94

  # ---------------------------
  # Filtre image (pré-sélection) : valeurs typiques de perte fournies
  # - insertion_loss_dB : perte dans la bande passante (dB)
  # - op1db_dBm : tenue en puissance
  # ---------------------------
  - name: "ImageFilter"
    type: "filter"
    insertion_loss_dB: 8.7
    op1db_dBm: 17.35

  # Atténuateur fixe 3 dB devant le mixer
  - name: "ATT-3dB"
    type: "atten"
    gain_dB: -3
    gain_dB_max: -3
    op1db_dBm: 20

  # ---------------------------
  # Mixer : conversion loss (gain_dB négatif), NF approximatif
  # - gain_dB : conversion loss (dB)
  # - nf_dB : estimation de la contribution du mixer (dB)
  # - op1db_dBm : OP1dB d'entrée ou de sortie selon la doc (ici considéré comme sortie)
  # ---------------------------
  - name: "Mixer"
    type: "mixer"
    gain_dB: -6.83               # perte de conversion (dB) — valeur négative attendue
    nf_dB: 7.5                   # figure de bruit indicative pour le mixeur (dB)
    op1db_dBm: 14

  # Filtre OL (passif)
  - name: "OL_Filter"
    type: "filter"
    insertion_loss_dB: 0.67
    op1db_dBm: 20

  # LNA après FI (gain élevé pour compenser pertes)
  - name: "LNA3"
    type: "ampli"
    gain_dB: 22.5
    nf_dB: 2.5
    op1db_dBm: 22

  # Autre atténuateur (positionnement / contrôle)
  - name: "ATT_30dB"
    type: "atten"
    gain_dB: -30
    gain_dB_max: -12
    op1db_dBm: 20

  # Equalizer / switch (passif)
  - name: "Equalizer"
    type: "switch"
    insertion_loss_dB: 2
    op1db_dBm: 25

  # LNA final
  - name: "LNA4"
    type: "ampli"
    gain_dB: 20.5
    nf_dB: 2.5
    op1db_dBm: 31.7

  # Briques du filtre FI (500 MHz BW) - passe-haut et passe-bas pour former le BPF
  - name: "500MHz-HPF"
    type: "filter"
    insertion_loss_dB: 1
    op1db_dBm: 23

  - name: "500MHz-LPF"
    type: "filter"
    insertion_loss_dB: 1
    op1db_dBm: 23

# ---------------------------
# Notes générales et conseils pratiques (ne pas oublier) :
# - Vérifier que les champs obligatoires existent pour chaque type.
#   * filter/switch : insertion_loss_dB obligatoire.
#   * ampli/mixer : gain_dB obligatoire ; nf_dB fortement recommandé.
#   * atten  : gain_dB négatif obligatoire.
# - Un OP1dB manquant dans le YAML conduit le script à utiliser une valeur par défaut (voir code).
#   C'est dangereux : mieux vaut renseigner systématiquement op1db_dBm.
# - Pour les filtres passifs, NF = insertion_loss_dB (en dB) est la convention utilisée ici.
# - Eviter d'utiliser le même "name" plusieurs fois si l'on veut les distinguer (bien que ce soit accepté).
# - Les valeurs fournies ici sont des exemples/mesures : adapter selon les datasheets des composants réels.
# - Si le script doit modéliser des éléments variables (ex : atténuateur réglable, filtre accordable),
#   utiliser gain_dB_max/gain_dB comme fourchette et lancer le script en mode use_gain_max=True pour l'étudier.
#
# Suggestions d'amélioration :
# - ajouter une clé "comment" ou "ref" pour lier l'entrée YAML à la référence du composant (référence fournisseur).
# - ajouter "freq_range: [f_min_MHz, f_max_MHz]" pour caractériser la bande d'opération d'un composant.
# - valider le YAML à l'ouverture et refuser les valeurs absurdes (ex : op1db_dBm > 50 dBm ou insertion_loss < 0).
